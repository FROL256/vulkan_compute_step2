// glslangValidator -e main -o comp.spv -V shader.comp

#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 16
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct Pixel
{
  vec4 value;
};

layout(push_constant) uniform params_t
{
  int width;
  int height;

} params;

layout(std140, binding = 0) buffer buf
{
   Pixel imageData[];
};

layout (binding = 1) uniform sampler2D inputTex;

vec4 Mundelbrot(vec2 uv)
{
  float n = 0.0;
  vec2 c = vec2(-.445, 0.0) +  (uv - 0.5)*(2.0+ 1.7*0.2),
  z = vec2(0.0);
  const int M = 128;
  for (int i = 0; i<M; i++)
  {
    z = vec2(z.x*z.x - z.y*z.y, 2.*z.x*z.y) + c;
    if (dot(z, z) > 2) break;
    n++;
  }
  // we use a simple cosine palette to determine color:
  // http://iquilezles.org/www/articles/palettes/palettes.htm
  float t = float(n) / float(M);
  vec3 d = vec3(0.3, 0.3, 0.5);
  vec3 e = vec3(-0.2, -0.3, -0.5);
  vec3 f = vec3(2.1, 2.0, 3.0);
  vec3 g = vec3(0.0, 0.1, 0.0);
  return vec4(d + e*cos(6.28318*(f*t+g)), 1.0);
}

void main()
{
  /*
  In order to fit the work into workgroups, some unnecessary threads are launched.
  We terminate those threads here. 
  */
  if(gl_GlobalInvocationID.x >= params.width || gl_GlobalInvocationID.y >= params.height)
    return;

  float x = float(gl_GlobalInvocationID.x) / float(params.width);
  float y = float(gl_GlobalInvocationID.y) / float(params.height);

  float x2 = float(gl_GlobalInvocationID.x) / 256.0f;
  float y2 = float(gl_GlobalInvocationID.y) / 256.0f;

  /*
  What follows is code for rendering the mandelbrot set. 
  */
  vec4 texColor = textureLod(inputTex, vec2(x2,y2), 0);
  vec4 color    = Mundelbrot(vec2(x,y));

  // store the rendered mandelbrot set into a storage buffer:
  imageData[params.width * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].value = color*texColor;
}